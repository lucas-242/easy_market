// Mocks generated by Mockito 5.2.0 from annotations
// in easy_market/test/app/core/auth/auth_mock_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:easy_market/app/core/auth/domain/entities/user_info.dart'
    as _i7;
import 'package:easy_market/app/core/auth/domain/repositories/auth_repository.dart'
    as _i5;
import 'package:easy_market/app/core/auth/infra/datasources/auth_datasource.dart'
    as _i8;
import 'package:easy_market/app/core/auth/infra/models/user_model.dart' as _i3;
import 'package:easy_market/app/core/errors/errors.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeUserModel_1 extends _i1.Fake implements _i3.UserModel {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> signInByEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signInByEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> loginByPhone(
          {String? phone}) =>
      (super.noSuchMethod(Invocation.method(#loginByPhone, [], {#phone: phone}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> verifyPhoneCode(
          {String? verificationId, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneCode, [],
                  {#verificationId: verificationId, #code: code}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>> sendPasswordResetEmail(
          {String? email}) =>
      (super.noSuchMethod(
              Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>> confirmPasswordReset(
          {String? code, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#confirmPasswordReset, [],
                  {#code: code, #newPassword: newPassword}),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i4.Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>> listenCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#listenCurrentUser, []),
              returnValue:
                  Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>>.empty())
          as _i4.Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i2.Unit>> signUp(
          {String? name, String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [], {#name: name, #email: email, #password: password}),
          returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i6.Failure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i6.Failure, _i2.Unit>>);
}

/// A class which mocks [AuthDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDatasource extends _i1.Mock implements _i8.AuthDatasource {
  MockAuthDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.UserModel> signInWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signInWithEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i4.Future<_i3.UserModel>);
  @override
  _i4.Future<_i3.UserModel> signInWithPhone({String? phone}) => (super
      .noSuchMethod(Invocation.method(#signInWithPhone, [], {#phone: phone}),
          returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1())) as _i4
      .Future<_i3.UserModel>);
  @override
  _i4.Future<_i3.UserModel> verifyPhoneCode(
          {String? verificationId, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneCode, [],
                  {#verificationId: verificationId, #code: code}),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i4.Future<_i3.UserModel>);
  @override
  _i4.Future<void> sendPasswordResetEmail({String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i3.UserModel> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i4.Future<_i3.UserModel>);
  @override
  _i4.Stream<_i3.UserModel?> listenCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#listenCurrentUser, []),
              returnValue: Stream<_i3.UserModel?>.empty())
          as _i4.Stream<_i3.UserModel?>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> signUp({String? name, String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [], {#name: name, #email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStream<T> extends _i1.Mock implements _i4.Stream<T> {
  MockStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i4.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<T> get first => (super.noSuchMethod(Invocation.getter(#first),
      returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> get single => (super.noSuchMethod(Invocation.getter(#single),
      returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Stream<T> asBroadcastStream(
          {void Function(_i4.StreamSubscription<T>)? onListen,
          void Function(_i4.StreamSubscription<T>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.StreamSubscription<T> listen(void Function(T)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<T>())
          as _i4.StreamSubscription<T>);
  @override
  _i4.Stream<T> where(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<S> map<S>(S Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Stream<E> asyncMap<E>(_i4.FutureOr<E> Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i4.Stream<E>);
  @override
  _i4.Stream<E> asyncExpand<E>(_i4.Stream<E>? Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i4.Stream<E>);
  @override
  _i4.Stream<T> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<S> expand<S>(Iterable<S> Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Future<dynamic> pipe(_i4.StreamConsumer<T>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Stream<S> transform<S>(_i4.StreamTransformer<T, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Future<T> reduce(T Function(T, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<S> fold<S>(S? initialValue, S Function(S, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i4.Future<S>);
  @override
  _i4.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<dynamic> forEach(void Function(T)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<bool> every(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> any(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i4.Stream<R>);
  @override
  _i4.Future<List<T>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
          returnValue: Future<List<T>>.value(<T>[])) as _i4.Future<List<T>>);
  @override
  _i4.Future<Set<T>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
          returnValue: Future<Set<T>>.value(<T>{})) as _i4.Future<Set<T>>);
  @override
  _i4.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i4.Future<E>);
  @override
  _i4.Stream<T> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<T> takeWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<T> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<T> skipWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Stream<T> distinct([bool Function(T, T)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Future<T> firstWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> lastWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> singleWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Stream<T> timeout(Duration? timeLimit,
          {void Function(_i4.EventSink<T>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
}
