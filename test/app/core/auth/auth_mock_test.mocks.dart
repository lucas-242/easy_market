// Mocks generated by Mockito 5.2.0 from annotations
// in easy_market/test/app/core/auth/auth_mock_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:easy_market/app/core/auth/domain/entities/user_info.dart'
    as _i7;
import 'package:easy_market/app/core/auth/domain/repositories/auth_repository.dart'
    as _i4;
import 'package:easy_market/app/core/auth/infra/datasources/auth_datasource.dart'
    as _i8;
import 'package:easy_market/app/core/auth/infra/models/user_model.dart' as _i3;
import 'package:easy_market/app/core/errors/errors.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeUserModel_1 extends _i1.Fake implements _i3.UserModel {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> signInByEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signInByEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> loginByPhone(
          {String? phone}) =>
      (super.noSuchMethod(Invocation.method(#loginByPhone, [], {#phone: phone}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> verifyPhoneCode(
          {String? verificationId, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneCode, [],
                  {#verificationId: verificationId, #code: code}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> sendPasswordResetEmail(
          {String? email}) =>
      (super.noSuchMethod(
              Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> confirmPasswordReset(
          {String? code, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#confirmPasswordReset, [],
                  {#code: code, #newPassword: newPassword}),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.UserInfo>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserInfo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.UserInfo>>);
  @override
  _i5.Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>> listenCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#listenCurrentUser, []),
              returnValue:
                  Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>>.empty())
          as _i5.Stream<_i2.Either<_i6.Failure, _i7.UserInfo?>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i6.Failure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> signUp(
          {String? name, String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [], {#name: name, #email: email, #password: password}),
          returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i6.Failure, _i2.Unit>())) as _i5
          .Future<_i2.Either<_i6.Failure, _i2.Unit>>);
}

/// A class which mocks [AuthDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDatasource extends _i1.Mock implements _i8.AuthDatasource {
  MockAuthDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.UserModel> signInWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signInWithEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i5.Future<_i3.UserModel>);
  @override
  _i5.Future<_i3.UserModel> signInWithPhone({String? phone}) => (super
      .noSuchMethod(Invocation.method(#signInWithPhone, [], {#phone: phone}),
          returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1())) as _i5
      .Future<_i3.UserModel>);
  @override
  _i5.Future<_i3.UserModel> verifyPhoneCode(
          {String? verificationId, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneCode, [],
                  {#verificationId: verificationId, #code: code}),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i5.Future<_i3.UserModel>);
  @override
  _i5.Future<void> sendPasswordResetEmail({String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.UserModel> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue: Future<_i3.UserModel>.value(_FakeUserModel_1()))
          as _i5.Future<_i3.UserModel>);
  @override
  _i5.Stream<_i3.UserModel?> listenCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#listenCurrentUser, []),
              returnValue: Stream<_i3.UserModel?>.empty())
          as _i5.Stream<_i3.UserModel?>);
  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> signUp({String? name, String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [], {#name: name, #email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
